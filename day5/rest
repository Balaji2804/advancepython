import React, { useState } from 'react';
import '../UserGuide.css';

const UserGuide = () => {
  const [currentSection, setCurrentSection] = useState(0);

  const sections = [
    {
      title: "Getting Started",
      content: (
        <div className="guide-content">
          <h2>Resiliency Framework Portal - High Level Design</h2>
          <ul>
            <li>The Resiliency Framework is a portal-based solution designed to manage failover operations for applications between East and West regions.</li>
            <li>It supports both ECS-based (Traditional) and Fargate-based (Serverless) applications, providing teams with a streamlined approach to manage application resilience.</li>
          </ul>
        </div>
      )
    },
    {
      title: "Portal Overview",
      content: (
        <div className="guide-content">
          <h3>Features and Capabilities</h3>
          <div className="feature-grid">
            <div className="feature-card">
              <h4>Platforms</h4>
              <ul>
                <li>Application Visibility: Users can view all applications within their respective teams</li>
                <li>Failover Operations
                  <ul>
                    <li>Direction options: "Failover to East" or "Failover to West"</li>
                    <li>Support for individual or bulk application selection</li>
                    <li>Confirmation workflow with detailed application list</li>
                    <li>Post-failover status reporting (Success/Skip/Failure counts)</li>
                  </ul>
                </li>
              </ul>
            </div>
            <div className="feature-card">
              <h4>Onboard</h4>
              <ul>
                <li>Application Name: Enter the name of the application.</li>
                <li>Domain URL: Provide the domain URL.</li>
                <li>Team Name: Select the team
                  <ul>
                    <li>offers</li>
                    <li>profile</li>
                    <li>checkout</li>
                    <li>activiti</li>
                  </ul>
                </li>
                <li>Deployment Type:
                  <ul>
                    <li>Traditional (ECS-based):
                      <ul>
                        <li>Requires Health Check East ID</li>
                        <li>Requires Health Check West ID</li>
                      </ul>
                    </li>
                    <li>Serverless (Fargate-based):
                      <ul>
                        <li>Requires Hosted Zone ID</li>
                        <li>Requires Record Name</li>
                      </ul>
                    </li>
                  </ul>
                </li>
                <li>Role ARN (Optional): Provide Role ARN for cross-account integration.</li>
                <li>POC Email: Enter the POC email addresses.</li>
              </ul>
            </div>
            <div className="feature-card">
              <h4>Execution Count</h4>
              <ul>
                <li>Graphical Representation: Users can view the graphical representation of failover operations performed.</li>
                <li>Team-wise: View operations performed by each team.</li>
                <li>Month-wise: View operations performed each month.</li>
              </ul>
            </div>
            <div className="feature-card">
              <h4>Track Logs</h4>
              <ul>
                <li>Date (IST): IST date format.</li>
                <li>Date (EST): EST date format.</li>
                <li>User: User who performed the failover.</li>
                <li>Direction: Direction to which the user performed the failover.</li>
                <li>Results: Results of the failover performed, including reasons for skipped and failed operations.</li>
              </ul>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "Onboarding Process",
      content: (
        <div className="guide-content">
          <h3>ECS-Based Applications</h3>
          <ol>
            <li>Enter basic application details</li>
            <li>Provide Health Check IDs for both regions</li>
            <li>Configure Role ARN if cross-account functionality is needed</li>
          </ol>
          <h3>Serverless Applications</h3>
          <ol>
            <li>Enter basic application details</li>
            <li>Provide Hosted Zone ID and Record Name</li>
            <li>Configure Role ARN if cross-account functionality is needed</li>
          </ol>
        </div>
      )
    },
    {
      title: "Portal Support",
      content: (
        <div className="guide-content">
          <h3>Request Access</h3>
          <p>Users can request access to the portal by emailing the XCP-DevOps team at <a href="mailto:xyz@abc.com">xcpdevops@comcast.com</a>.</p>
        </div>
      )
    }
  ];

  return (
    <div className="user-guide">
      <div className="guide-container">
        <div className="content-area">
          {sections[currentSection].content}
        </div>

        <div className="section-switcher">
          <div className="progress-bar">
            <div
              className="progress-fill"
              style={{ width: `${(currentSection + 1) * (100 / sections.length)}%` }}
            ></div>
          </div>

          <div className="section-buttons">
            {currentSection > 0 && (
              <button
                className="nav-button prev"
                onClick={() => setCurrentSection(prev => prev - 1)}
              >
                ← Previous
              </button>
            )}
            <span className="section-indicator">
              {currentSection + 1} / {sections.length}
            </span>
            {currentSection < sections.length - 1 && (
              <button
                className="nav-button next"
                onClick={() => setCurrentSection(prev => prev + 1)}
              >
                Next →
              </button>
            )}
          </div>

          <div className="section-dots">
            {sections.map((_, index) => (
              <button
                key={index}
                className={`dot ${index === currentSection ? 'active' : ''}`}
                onClick={() => setCurrentSection(index)}
              />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserGuide;

.user-guide {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.guide-container {
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  position: relative;
  min-height: 500px;
  display: flex;
  flex-direction: column;
}

.content-area {
  flex: 1;
  padding: 30px;
  overflow-y: auto;
  animation: fadeIn 0.5s ease-in-out;
}

.guide-content h2 {
  font-size: 24px;
  margin-bottom: 20px;
  color: #2c3e50;
}

.guide-content h3 {
  font-size: 20px;
  margin: 24px 0 16px;
  color: #34495e;
}

.guide-content h4 {
  font-size: 16px;
  margin: 16px 0 8px;
  color: #2c3e50;
}

.guide-content p {
  line-height: 1.6;
  color: #4a5568;
  margin-bottom: 16px;
}

.guide-content ul {
  list-style-type: none;
  padding: 0;
}

.guide-content ul li {
  padding: 8px 0 8px 24px;
  position: relative;
  color: #4a5568;
}

.guide-content ul li:before {
  content: "•";
  position: absolute;
  left: 0;
  color: #3498db;
}

.guide-content ol {
  padding-left: 20px;
  color: #4a5568;
}

/* Feature Grid */
.feature-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.feature-card {
  padding: 20px;
  background: #f8fafc;
  border-radius: 8px;
  border: 1px solid #e2e8f0;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.feature-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

/* Section Switcher */
.section-switcher {
  padding: 20px;
  border-top: 1px solid #e2e8f0;
  background: #f8fafc;
  border-radius: 0 0 12px 12px;
}

.progress-bar {
  height: 4px;
  background: #e2e8f0;
  border-radius: 2px;
  margin-bottom: 20px;
}

.progress-fill {
  height: 100%;
  background: #3498db;
  border-radius: 2px;
  transition: width 0.3s ease;
}

.section-buttons {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.nav-button {
  background: #3498db;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.2s;
}

.nav-button:hover {
  background: #2980b9;
}

.section-indicator {
  color: #64748b;
  font-size: 14px;
}

.section-dots {
  display: flex;
  justify-content: center;
  gap: 8px;
}

.dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #cbd5e1;
  border: none;
  padding: 0;
  cursor: pointer;
  transition: all 0.2s;
}

.dot.active {
  background: #3498db;
  transform: scale(1.3);
}

/* Scrollbar styling */
.content-area::-webkit-scrollbar {
  width: 12px;
}

.content-area::-webkit-scrollbar-track {
  background: #f1f1f1;
}

.content-area::-webkit-scrollbar-thumb {
  background-color: #888;
  border-radius: 10px;
  border: 3px solid #f1f1f1;
}

.content-area::-webkit-scrollbar-thumb:hover {
  background: #555;
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
